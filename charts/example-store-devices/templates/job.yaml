---
apiVersion: batch/v1
kind: Job
metadata:
  name: approve-example-devices
  annotations:
    argocd.argoproj.io/hook: PostSync
spec:
  template:
    spec:
      restartPolicy: OnFailure
      backoffLimit: 5
      serviceAccountName: route-reader
      containers:
        - name: approve-devices
          image: image-registry.openshift-image-registry.svc:5000/student-services/flightctl-cli:latest
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              FLIGHTCTL_USERNAME=$(cat /tmp/openshift-auth/username)
              FLIGHTCTL_PASSWORD=$(cat /tmp/openshift-auth/password)
              until FLIGHTCTL_API_URL=$(oc get route flightctl-api-route -n open-cluster-management -o go-template='{{ "{{" }}.spec.host{{ "}}" }}') && [ -n "$FLIGHTCTL_API_URL" ]; do
                echo "Route not found, retrying in 5 seconds..."
                sleep 5
              done

              until flightctl login "https://$FLIGHTCTL_API_URL" --username "$FLIGHTCTL_USERNAME" --password "$FLIGHTCTL_PASSWORD" --insecure-skip-tls-verify; do
                echo "Login failed, retrying in 5 seconds..."
                sleep 5
              done

              # Device name array
              ALIASES=(
{{- range .Values.storeDevices }}
                "{{ .name }}"
{{- end }}
              )

              # Keep track of which aliases we've already approved
              declare -A APPROVED_ALIASES

              # Loop until all aliases have been approved
              while [ "${#APPROVED_ALIASES[@]}" -lt "$TOTAL_DEVICES" ]; do
                echo "Checking for pending enrollment requests..."

                # Fetch all pending enrollment requests
                mapfile -t PENDING_DEVICE_IDS < <(
                  flightctl get enrollmentrequests 2>/dev/null \
                  | awk 'NR>1 && $2 == "Pending" { print $1 }'
                )

                if [ ${#PENDING_DEVICE_IDS[@]} -eq 0 ]; then
                  echo "No pending devices found. Retrying in 10 seconds..."
                  sleep 10
                  continue
                fi

                # Approve each pending request with an unused alias
                for DEVICE_ID in "${PENDING_DEVICE_IDS[@]}"; do
                  for ALIAS in "${ALIASES[@]}"; do
                    if [[ -z "${APPROVED_ALIASES[$ALIAS]+x}" ]]; then
                      echo "Approving device '$DEVICE_ID' with alias='$ALIAS'..."
                      flightctl approve -l "alias=${ALIAS}" -l "pos=prod" "enrollmentrequest/${DEVICE_ID}"
                      APPROVED_ALIASES["$ALIAS"]=true
                      break
                    fi
                  done
                done

                echo "Approved devices count: ${#APPROVED_ALIASES[@]}/$TOTAL_DEVICES"

                if [ "${#APPROVED_ALIASES[@]}" -lt "$TOTAL_DEVICES" ]; then
                  echo "Waiting before checking again..."
                  sleep 10
                fi
              done

              echo "All devices have been approved!"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: dot-config
              mountPath: /.config
            - name: openshift-auth
              readOnly: true
              mountPath: /tmp/openshift-auth
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
        - name: dot-config
          emptyDir:
            sizeLimit: 100Mi
        - name: openshift-auth
          secret:
            secretName: openshift-auth




